---
const bodyColors = [
  { name: 'Classic Yellow', value: '#f3df49' },
  { name: 'Green', value: '#a8d530' },
  { name: 'Blue', value: '#42aaff' },
  { name: 'Orange', value: '#ffa711' },
  { name: 'Pink', value: '#ff4f51' },
  { name: 'Purple', value: '#904ae8' },
  { name: 'Gray', value: '#6b7280' },
  { name: 'Teal', value: '#14b8a6' },
];

const hornColors = [
  { name: 'Black', value: '#2e2e2c' },
  { name: 'Brown', value: '#8b4513' },
  { name: 'Red', value: '#ef4444' },
  { name: 'Purple', value: '#904ae8' },
  { name: 'Gold', value: '#fbbf24' },
  { name: 'None', value: 'transparent' },
];

const tailColors = [
  { name: 'Match Body', value: 'match' },
  { name: 'Black', value: '#2e2e2c' },
  { name: 'Brown', value: '#8b4513' },
  { name: 'Red', value: '#ef4444' },
  { name: 'None', value: 'transparent' },
];

const accessories = [
  { name: 'None', value: 'none' },
  { name: 'Laptop', value: 'laptop' },
  { name: 'Headphones', value: 'headphones' },
  { name: 'Glasses', value: 'glasses' },
  { name: 'Coffee', value: 'coffee' },
  { name: 'Lightning', value: 'lightning' },
];

const backgrounds = [
  { name: 'None', value: 'transparent' },
  { name: 'White', value: 'white' },
  { name: 'Code', value: 'code' },
  { name: 'Space', value: 'space' },
  { name: 'Gradient', value: 'gradient' },
  { name: 'Matrix', value: 'matrix' },
];
---

<style>
  :root {
    --color-monster: #f3df49;
    --color-horns: #2e2e2c;
    --color-tail: #f3df49;
  }

  .monster-container {
    position: relative;
    width: 400px;
    height: 400px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .monster {
    position: relative;
    width: 280px;
    height: 350px;
  }

  .monster-body {
    height: 220px;
    width: 220px;
    background-color: var(--color-monster);
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
    top: 80px;
    border-radius: 10px;
    z-index: 2;
  }

  .monster-body:before {
    content: '';
    position: absolute;
    width: 300px;
    height: 50px;
    background-color: var(--color-monster);
    top: 80px;
    left: 50%;
    transform: translateX(-50%);
    border-radius: 25px;
  }

  .monster-body:after {
    content: '';
    position: absolute;
    height: 40px;
    width: 50px;
    background-color: var(--color-monster);
    bottom: -35px;
    left: 30px;
    border-radius: 0 0 20px 20px;
    box-shadow: 110px 0 0 0 var(--color-monster);
  }

  .monster-horns {
    position: absolute;
    top: 45px;
    left: 50%;
    transform: translateX(-50%);
    width: 200px;
    height: 60px;
    z-index: 1;
  }

  .monster-horns:before,
  .monster-horns:after {
    content: '';
    position: absolute;
    width: 25px;
    height: 45px;
    background: var(--color-horns);
    top: 0;
    border-radius: 50% 50% 0 0 / 100% 100% 0 0;
  }

  .monster-horns:before {
    left: 45px;
    transform: rotate(-15deg);
  }

  .monster-horns:after {
    right: 45px;
    transform: rotate(15deg);
  }

  .monster-tail {
    height: 60px;
    width: 90px;
    border: 12px solid var(--color-tail);
    position: absolute;
    right: -10px;
    top: 180px;
    transform: rotate(-15deg);
    border-top: none;
    border-left: none;
    border-radius: 0 0 30px 0;
    z-index: 1;
  }

  .monster-tail:before {
    content: '';
    position: absolute;
    height: 0;
    width: 0;
    border-bottom: 25px solid var(--color-tail);
    border-left: 25px solid transparent;
    border-right: 25px solid transparent;
    right: -15px;
    bottom: 45px;
    transform: rotate(45deg);
  }

  .monster-face {
    position: absolute;
    top: 80px;
    left: 50%;
    transform: translateX(-50%);
    z-index: 3;
  }

  .monster-face img {
    width: 220px;
    height: auto;
  }

  .js-badge {
    position: absolute;
    bottom: 10px;
    right: 15px;
    color: #2e2e2c;
    font-family: Futura, 'Trebuchet MS', Arial, sans-serif;
    letter-spacing: -1px;
    line-height: 1.1em;
    font-weight: 700;
    font-size: 50px;
    z-index: 4;
  }

  .monster-accessory {
    position: absolute;
    z-index: 5;
  }

  .accessory-laptop {
    bottom: 100px;
    left: 50%;
    transform: translateX(-50%);
    width: 140px;
    height: 90px;
    background: #374151;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .accessory-laptop:after {
    content: '';
    width: 120px;
    height: 70px;
    background: #1f2937;
    border-radius: 3px;
  }

  .accessory-headphones {
    top: 15px;
    left: 50%;
    transform: translateX(-50%);
    width: 240px;
    height: 180px;
  }

  .accessory-headphones:before {
    content: '';
    position: absolute;
    width: 200px;
    height: 100px;
    border: 10px solid #2e2e2c;
    border-bottom: none;
    border-radius: 100px 100px 0 0;
    left: 20px;
  }

  .accessory-headphones:after {
    content: '';
    position: absolute;
    width: 50px;
    height: 60px;
    background: #2e2e2c;
    border-radius: 50%;
    bottom: 0;
    left: 0;
    box-shadow: 190px 0 0 0 #2e2e2c;
  }

  .accessory-glasses {
    top: 100px;
    left: 50%;
    transform: translateX(-50%);
    width: 200px;
    height: 80px;
  }

  .accessory-glasses:before {
    content: '';
    position: absolute;
    width: 60px;
    height: 60px;
    border: 5px solid #2e2e2c;
    border-radius: 50%;
    left: 35px;
    top: 25px;
  }

  .accessory-glasses:after {
    content: '';
    position: absolute;
    width: 60px;
    height: 60px;
    border: 5px solid #2e2e2c;
    border-radius: 50%;
    right: 35px;
    top: 25px;
  }

  .accessory-coffee {
    bottom: 80px;
    left: -30px;
    width: 50px;
    height: 60px;
    border-radius: 0 0 10px 10px;
  }

  .accessory-coffee:before {
    content: '☕';
    position: absolute;
    top: 0px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 50px;
  }

  .accessory-lightning {
    top: 10px;
    right: 20px;
    font-size: 40px;
  }

  .accessory-lightning:before {
    content: '⚡';
  }
</style>

<div class="grid lg:grid-cols-2 gap-8">
  <!-- Preview Section -->
  <div class="order-2 lg:order-1">
    <div class="bg-zinc-900/50 border border-zinc-800 rounded-2xl p-8 sticky top-4">
      <div
        class="aspect-square bg-zinc-800/50 rounded-xl mb-4 relative overflow-hidden"
        id="monster-preview"
      >
        <!-- Background Layer -->
        <div class="absolute inset-0" id="background-layer"></div>

        <!-- Monster Container -->
        <div class="monster-container">
          <div class="monster">
            <div class="monster-horns"></div>
            <div class="monster-tail"></div>
            <div class="monster-body">
              <div class="js-badge">JS</div>
            </div>
            <div class="monster-face">
              <img src="/monster-faces/face-0.png" id="face-img" alt="Monster face" />
            </div>
            <div class="monster-accessory" id="accessory-layer"></div>
          </div>
        </div>
      </div>

      <button
        id="reset-btn"
        class="w-full px-4 py-3 bg-zinc-800 text-white font-bold rounded-lg hover:bg-zinc-700 transition-colors duration-300 border border-zinc-700"
      >
        Reset to Default
      </button>
    </div>
  </div>

  <!-- Controls Section -->
  <div class="order-1 lg:order-2 space-y-6">
    <!-- Face -->
    <div class="bg-zinc-900/50 border border-zinc-800 rounded-xl p-6">
      <h3 class="text-lg font-bold text-white mb-4">Face Expression</h3>
      <div class="grid grid-cols-3 gap-2">
        {
          [0, 1, 2, 3, 4, 5].map((num) => (
            <button
              class:list={`face-btn p-2 bg-yellow-400 rounded-lg hover:bg-yellow-500 transition-all duration-300 ${num === 0 ? 'ring-2 ring-zinc-900' : ''}`}
              data-face={num}
            >
              <img
                src={`/monster-faces/face-${num}.png`}
                alt={`Face ${num}`}
                class="w-full h-auto"
              />
            </button>
          ))
        }
      </div>
    </div>

    <!-- Body Color -->
    <div class="bg-zinc-900/50 border border-zinc-800 rounded-xl p-6">
      <h3 class="text-lg font-bold text-white mb-4">Body Color</h3>
      <div class="grid grid-cols-3 gap-2">
        {
          bodyColors.map((color, index) => (
            <button
              class:list={`color-btn px-3 py-2 text-gray-300 rounded-lg text-sm font-medium transition-all duration-300 hover:bg-zinc-700 ${index === 0 ? 'ring-2 ring-yellow-400 text-white' : ''}`}
              style={`background-color: ${color.value}`}
              data-color={color.value}
            >
              {color.name}
            </button>
          ))
        }
      </div>
    </div>

    <!-- Horns Color -->
    <div class="bg-zinc-900/50 border border-zinc-800 rounded-xl p-6">
      <h3 class="text-lg font-bold text-white mb-4">Horns</h3>
      <div class="grid grid-cols-3 gap-2">
        {
          hornColors.map((color, index) => (
            <button
              class:list={`horn-btn px-3 py-2 text-gray-300 rounded-lg text-sm font-medium transition-all duration-300 hover:bg-zinc-700 ${index === 0 ? 'ring-2 ring-yellow-400 text-white' : ''}`}
              style={`background-color: ${color.value === 'transparent' ? '#374151' : color.value}`}
              data-horn={color.value}
            >
              {color.name}
            </button>
          ))
        }
      </div>
    </div>

    <!-- Tail Color -->
    <div class="bg-zinc-900/50 border border-zinc-800 rounded-xl p-6">
      <h3 class="text-lg font-bold text-white mb-4">Tail</h3>
      <div class="grid grid-cols-3 gap-2">
        {
          tailColors.map((color, index) => (
            <button
              class:list={`tail-btn px-3 py-2 text-gray-300 rounded-lg text-sm font-medium transition-all duration-300 hover:bg-zinc-700 ${index === 0 ? 'ring-2 ring-yellow-400 text-white' : ''}`}
              data-tail={color.value}
              style={`background-color: ${color.value === 'match' || color.value === 'transparent' ? '#374151' : color.value}`}
            >
              {color.name}
            </button>
          ))
        }
      </div>
    </div>

    <!-- Accessories -->
    <div class="bg-zinc-900/50 border border-zinc-800 rounded-xl p-6">
      <h3 class="text-lg font-bold text-white mb-4">Accessories</h3>
      <div class="grid grid-cols-3 gap-2">
        {
          accessories.map((acc, index) => (
            <button
              class:list={`accessory-btn px-3 py-2 bg-zinc-800 text-gray-300 rounded-lg text-sm font-medium transition-all duration-300 hover:bg-zinc-700 ${index === 0 ? 'ring-2 ring-yellow-400 text-white' : ''}`}
              data-accessory={acc.value}
            >
              {acc.name}
            </button>
          ))
        }
      </div>
    </div>

    <!-- Background -->
    <div class="bg-zinc-900/50 border border-zinc-800 rounded-xl p-6">
      <h3 class="text-lg font-bold text-white mb-4">Background</h3>
      <div class="grid grid-cols-2 gap-2">
        {
          backgrounds.map((bg, index) => (
            <button
              class:list={`background-btn px-3 py-2 bg-zinc-800 text-gray-300 rounded-lg text-sm font-medium transition-all duration-300 hover:bg-zinc-700 ${index === 0 ? 'ring-2 ring-yellow-400 text-white' : ''}`}
              data-background={bg.value}
            >
              {bg.name}
            </button>
          ))
        }
      </div>
    </div>
  </div>
</div>

<script>
  const docRoot = document.querySelector(':root') as HTMLElement;

  let currentMonster = {
    face: 0,
    bodyColor: '#f3df49',
    hornColor: '#2e2e2c',
    tailColor: 'match',
    accessory: 'none',
    background: 'transparent',
  };

  function updateMonsterColors() {
    docRoot.style.setProperty('--color-monster', currentMonster.bodyColor);
    docRoot.style.setProperty('--color-horns', currentMonster.hornColor);

    const tailColor =
      currentMonster.tailColor === 'match' ? currentMonster.bodyColor : currentMonster.tailColor;
    docRoot.style.setProperty('--color-tail', tailColor);
  }

  function updateFace() {
    const faceImg = document.getElementById('face-img') as HTMLImageElement;
    if (faceImg) {
      faceImg.src = `/monster-faces/face-${currentMonster.face}.png`;
    }
  }

  function updateAccessory() {
    const accLayer = document.getElementById('accessory-layer');
    if (!accLayer) return;

    accLayer.className = 'monster-accessory';

    if (currentMonster.accessory !== 'none') {
      accLayer.classList.add(`accessory-${currentMonster.accessory}`);
    }
  }

  function updateBackground() {
    const bgLayer = document.getElementById('background-layer');
    if (!bgLayer) return;

    bgLayer.innerHTML = '';
    bgLayer.className = 'absolute inset-0';

    switch (currentMonster.background) {
      case 'white':
        bgLayer.style.background = '#ffffff';
        break;
      case 'gradient': {
        const getRandomRGB = () => {
          const r = Math.floor(Math.random() * 256);
          const g = Math.floor(Math.random() * 256);
          const b = Math.floor(Math.random() * 256);
          return `rgba(${r}, ${g}, ${b}, 0.3)`;
        };

        const color1 = getRandomRGB();
        const color2 = getRandomRGB();
        const angle = Math.floor(Math.random() * 360);

        bgLayer.style.background = `linear-gradient(${angle}deg, ${color1}, ${color2})`;
        break;
      }
      case 'code':
        bgLayer.style.background = '#0d1117';
        bgLayer.innerHTML = `
          <div class="absolute inset-0 p-2 overflow-hidden">
            <pre class="text-green-400/30 font-mono text-xs leading-tight whitespace-pre">// JavaScript Monster Class
class JSMonster {
  constructor() {
    this.type = 'JavaScript';
    this.power = 9000;
    this.skills = ['React', 'Node', 'TypeScript'];
  }
  
  dominate() {
    return 'Total domination achieved!';
  }
}

const monster = new JSMonster();
console.log(monster.dominate());

// Framework integrations
import React from 'react';
import { Monster } from './components';

function App() {
  return <Monster color="#f3df49" />;
}

// Server setup
const express = require('express');
const app = express();

app.get('/monster', (req, res) => {
  res.json({ status: 'unstoppable' });
});

// Database connection
const mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/jsmonster');

// TypeScript interface
interface IMonster {
  name: string;
  power: number;
  skills: string[];
}</pre>
          </div>
        `;
        break;
      case 'space': {
        bgLayer.style.background = 'linear-gradient(180deg, #0a0e27 0%, #000000 100%)';
        let stars = '';
        for (let i = 0; i < 60; i++) {
          const size = Math.random() < 0.7 ? 1 : Math.random() < 0.9 ? 2 : 3;
          const top = Math.random() * 100;
          const left = Math.random() * 100;
          const isPulse = Math.random() < 0.2;
          const delay = Math.random() * 2;
          const opacity = 0.4 + Math.random() * 0.6;

          let color = 'white';
          if (Math.random() < 0.1) color = 'yellow-200';
          if (Math.random() < 0.1) color = 'blue-200';

          stars += `<div class="absolute w-${size === 1 ? '0.5' : size === 2 ? '1' : '1.5'} h-${size === 1 ? '0.5' : size === 2 ? '1' : '1.5'} bg-${color} rounded-full ${isPulse ? 'animate-pulse' : ''}" style="top: ${top}%; left: ${left}%; opacity: ${opacity}; ${isPulse ? `animation-delay: ${delay}s;` : ''}"></div>`;
        }
        bgLayer.innerHTML = stars;
        break;
      }
      case 'matrix':
        bgLayer.style.background = '#000000';
        bgLayer.innerHTML = `
          <div class="absolute inset-0 overflow-hidden">
            <div class="text-green-400/25 font-mono text-xs leading-tight">
              <div class="absolute top-4 left-4">01001010 01010011</div>
              <div class="absolute top-4 right-4">10110101 11010010</div>
              <div class="absolute top-12 left-12">01101101 10101110</div>
              <div class="absolute top-12 right-12">11011010 01011101</div>
              <div class="absolute top-20 left-20">00110010 11001100</div>
              <div class="absolute top-20 right-20">10101010 00101101</div>
              <div class="absolute bottom-20 left-4">11110000 01010101</div>
              <div class="absolute bottom-20 right-4">00001111 10101010</div>
              <div class="absolute bottom-12 left-12">01010011 11001001</div>
              <div class="absolute bottom-12 right-12">10101100 00110110</div>
              <div class="absolute bottom-4 left-20">11011011 10010010</div>
              <div class="absolute bottom-4 right-20">00100100 01101101</div>
              <div class="absolute top-1/2 left-8 transform -translate-y-1/2">JavaScript</div>
              <div class="absolute top-1/2 right-8 transform -translate-y-1/2">Monster</div>
            </div>
          </div>
        `;
        break;
      default:
        bgLayer.style.background = '';
    }
  }

  function updateMonster() {
    updateMonsterColors();
    updateFace();
    updateAccessory();
    updateBackground();
  }

  document.querySelectorAll('.face-btn').forEach((btn) => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      currentMonster.face = parseInt(target.dataset.face || '0');
      updateFace();

      document
        .querySelectorAll('.face-btn')
        .forEach((b) => b.classList.remove('ring-2', 'ring-zinc-900'));
      target.classList.add('ring-2', 'ring-zinc-900');
    });
  });

  document.querySelectorAll('.color-btn').forEach((btn) => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      currentMonster.bodyColor = target.dataset.color || '#f3df49';
      updateMonsterColors();

      document
        .querySelectorAll('.color-btn')
        .forEach((b) => b.classList.remove('ring-2', 'ring-yellow-400', 'text-white'));
      target.classList.add('ring-2', 'ring-yellow-400', 'text-white');
    });
  });

  document.querySelectorAll('.horn-btn').forEach((btn) => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      currentMonster.hornColor = target.dataset.horn || '#2e2e2c';
      updateMonsterColors();

      document
        .querySelectorAll('.horn-btn')
        .forEach((b) => b.classList.remove('ring-2', 'ring-yellow-400', 'text-white'));
      target.classList.add('ring-2', 'ring-yellow-400', 'text-white');
    });
  });

  document.querySelectorAll('.tail-btn').forEach((btn) => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      currentMonster.tailColor = target.dataset.tail || 'match';
      updateMonsterColors();

      document
        .querySelectorAll('.tail-btn')
        .forEach((b) => b.classList.remove('ring-2', 'ring-yellow-400', 'text-white'));
      target.classList.add('ring-2', 'ring-yellow-400', 'text-white');
    });
  });

  document.querySelectorAll('.accessory-btn').forEach((btn) => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      currentMonster.accessory = target.dataset.accessory || 'none';
      updateAccessory();

      document
        .querySelectorAll('.accessory-btn')
        .forEach((b) => b.classList.remove('ring-2', 'ring-yellow-400', 'text-white'));
      target.classList.add('ring-2', 'ring-yellow-400', 'text-white');
    });
  });

  document.querySelectorAll('.background-btn').forEach((btn) => {
    btn.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLElement;
      currentMonster.background = target.dataset.background || 'transparent';
      updateBackground();

      document
        .querySelectorAll('.background-btn')
        .forEach((b) => b.classList.remove('ring-2', 'ring-yellow-400', 'text-white'));
      target.classList.add('ring-2', 'ring-yellow-400', 'text-white');
    });
  });

  document.getElementById('reset-btn')?.addEventListener('click', () => {
    currentMonster = {
      face: 0,
      bodyColor: '#f3df49',
      hornColor: '#2e2e2c',
      tailColor: 'match',
      accessory: 'none',
      background: 'transparent',
    };
    updateMonster();

    document.querySelectorAll('.face-btn')[0]?.classList.add('ring-2', 'ring-zinc-900');
    document.querySelectorAll('.color-btn')[0]?.click();
    document.querySelectorAll('.horn-btn')[0]?.click();
    document.querySelectorAll('.tail-btn')[0]?.click();
    document.querySelectorAll('.accessory-btn')[0]?.click();
    document.querySelectorAll('.background-btn')[0]?.click();
  });

  updateMonster();
</script>
